# Dette er cykelnetwork.style fil der bruges af osm2pgsql til import af
# Danmarks cykelnetværk og trapper fra OpenStreetMap og ind i PostgreSQL/PostGIS
# cykelstier er i eget trace og parallel med veje - pt. i alt ca. 14.800 km
#
# Linjekommando program osm2pgsql hentes her https://osm2pgsql.org/ 
#
# Lav en mappe på din computer der hedder osm (eller hvad du nu har lyst til) smid følgende to programmer i den mappe
# osmconvert64 hentes her https://wiki.openstreetmap.org/wiki/Osmconvert
# osmfilter hentes her https://wiki.openstreetmap.org/wiki/Osmfilter
#
# Hent OpenStreetMap Danmark data fra Geofabrik og smid i osm mappen (eller hvad du bruger af mappenavn)
# Filnavn denmark-latest.osm.pbf  URL til download side https://download.geofabrik.de/europe/denmark.html
#
#
# Kør følgende linjekommandoer fra osm mappen (eller hvad du bruger af mappenavn)
# osmconvert64 denmark-latest.osm.pbf -o=denmark.o5m
# osmfilter denmark.o5m --keep="highway" >dkvej.o5m
# osmfilter dkvej.o5m --keep="highway=cycleway OR highway=steps" >cykelimport.pbf
# Næste to linjer kopieres og indsættes i OsmFilter linjekommando som en lang linje
# osmfilter dkvej.o5m --keep="cycleway OR cycleway:right OR cycleway:left OR cycleway:both OR cycleway:both:lane OR cycleway:right:lane"
# --drop="cycleway=no OR cycleway=yes OR cycleway=none" >cykelimport1.pbf 
# osmconvert64 cykelimport.pbf cykelimport1.pbf -o=cykelmerge.pbf 
#
# Import kommando til PostGreSQL i et skema der hedder openstreetmap - husk at oprette skema først før import - 
# osm2pgsql -c -p cykeldata_osm -m -d postgres -U postgres -H localhost --output-pgsql-schema=openstreetmap -W -S  C:\osm\cyclenetwork.style  C:\osm\cykelmerge.pbf 
# 
# 
# Læs mere om importparametre https://osm2pgsql.org/doc/manual.html#command-line-options
#
# Når import er lykkes er det god ide at køre nogle SQL tilføjelser til OSM tabellerne
# ALTER TABLE openstreetmap.cykeldata_osm_line ADD COLUMN gid BIGSERIAL PRIMARY KEY;
# ALTER TABLE openstreetmap.cykeldata_osm_point ADD COLUMN gid BIGSERIAL PRIMARY KEY;
# ALTER TABLE openstreetmap.cykeldata_osm_line RENAME COLUMN way TO geom;
# ALTER TABLE openstreetmap.cykeldata_osm_point RENAME COLUMN way TO geom;
# ALTER TABLE openstreetmap.cykeldata_osm_line ADD COLUMN laengde double precision;
# UPDATE openstreetmap.cykeldata_osm_line SET laengde = ST_Length(openstreetmap.cykeldata_osm_line.geom);
#
# cykelimport fil og guide lavet af Søren Johannessen Twitter https://twitter.com/neogeografen 
#
# A .style file has 4 columns that define how OSM objects end up in tables in
# the database and what columns are created. It interacts with the command-line
# hstore options.
#
# Columns
# =======
#
# OsmType: This is either "node", "way" or "node,way" and indicates if this tag
# applies to nodes, ways, or both.
#
# Tag: The tag
#
# DataType: The type of the column to be created. Normally "text"
#
# Flags: Flags that indicate what table the OSM object is moved into.
#
# There are 6 possible flags. These flags are used both to indicate if a column
# should be created, and if ways with the tag are assumed to be areas. The area
# assumptions can be overridden with an area=yes/no tag
#
# polygon - Create a column for this tag, and objects with the tag are areas
#
# linear - Create a column for this tag
#
# nocolumn - Override the above and don't create a column for the tag, but do
# include objects with this tag
#
# phstore - Same as polygon,nocolumn for backward compatibility
#
# delete - Drop this tag completely and don't create a column for it. This also
# prevents the tag from being added to hstore columns
#
# nocache - Deprecated and does nothing
#
# If an object has a tag that indicates it is an area or has area=yes/1,
# osm2pgsql will try to turn it into an area. If it succeeds, it places it in
# the polygon table. If it fails (e.g. not a closed way) it places it in the
# line table.
#
# Nodes are never placed into the polygon or line table and are always placed in
# the point table.
#
# Hstore
# ======
#
# The options --hstore, --hstore-match-only, and --hstore-all interact with
# the .style file.
#
# With --hstore any tags without a column will be added to the hstore column.
# This will also cause all objects to be kept.
#
# With --hstore-match-only the behavior for tags is the same, but objects are
# only kept if they have a non-NULL value in one of the columns.
#
# With --hstore-all all tags are added to the hstore column unless they appear
# in the style file with a delete flag, causing duplication between the normal
# columns and the hstore column.
#
# Special database columns
# ========================
#
# There are some special database columns that if present in the .style file
# will be populated by osm2pgsql.
#
# These are
#
# z_order - datatype int4
#
# way_area - datatype real. The area of the way, in the units of the projection
# (e.g. square mercator meters). Only applies to areas
#
# osm_user - datatype text
# osm_uid - datatype integer
# osm_version - datatype integer
# osm_changeset - datatype integer
# osm_timestamp - datatype timestamptz(0).
# Used with the --extra-attributes option to include metadata in the database.
# If importing with both --hstore and --extra-attributes the meta-data will
# end up in the tags hstore column regardless of the style file.

# Her er kolonnerne der bliver lavet i PostGreSQL for hhv. linjer og punkter
# OsmType  Tag          DataType     Flags
node,way   highway      text         linear
node,way   surface      text         linear
node,way   barrier      text         linear
node,way   width        text         linear
node,way   lit          text         linear
node,way   bicycle      text         linear
node,way   cycleway     text         linear
node,way   foot         text         linear
node,way   oneway       text         linear
node,way   bridge       text         linear
node,way   tunnel       text         linear
node,way   crossing     text         linear
node,way   ramp:bicycle text         linear
node,way   traffic_signals text      linear
node,way   incline      text         linear
node,way   step_count   text         linear
node,way   name         text         linear
node,way   z_order      int4         linear # This is calculated during import


# Area tags
# We don't make columns for these tags, but objects with them are areas.
# Mainly for use with hstore
way         abandoned:aeroway       text    polygon,nocolumn
way         abandoned:amenity       text    polygon,nocolumn
way         abandoned:building      text    polygon,nocolumn
way         abandoned:landuse       text    polygon,nocolumn
way         abandoned:power         text    polygon,nocolumn
way         area:highway            text    polygon,nocolumn

# Deleted tags
# These are tags that are generally regarded as useless for most rendering.
# Most of them are from imports or intended as internal information for mappers
# Some of them are automatically deleted by editors.
# If you want some of them, perhaps for a debugging layer, just delete the lines.

# These tags are used by mappers to keep track of data.
# They aren't very useful for rendering.
node,way    note                    text    delete
node,way    note:*                  text    delete
node,way    source                  text    delete
node,way    source_ref              text    delete
node,way    source:*                text    delete
node,way    attribution             text    delete
node,way    comment                 text    delete
node,way    fixme                   text    delete

# Tags generally dropped by editors, not otherwise covered
node,way    created_by              text    delete
node,way    odbl                    text    delete
node,way    odbl:note               text    delete
node,way    SK53_bulk:load          text    delete

# Lots of import tags
# TIGER (US)
node,way    tiger:*                 text    delete

# NHD (US)
# NHD has been converted every way imaginable
node,way    NHD:*                   text    delete
node,way    nhd:*                   text    delete

# GNIS (US)
node,way    gnis:*                  text    delete

# Geobase (CA)
node,way    geobase:*               text    delete
# NHN (CA)
node,way    accuracy:meters         text    delete
node,way    sub_sea:type            text    delete
node,way    waterway:type           text    delete

# KSJ2 (JA)
# See also note:ja and source_ref above
node,way    KSJ2:*                  text    delete
# Yahoo/ALPS (JA)
node,way    yh:*                    text    delete

# osak (DK)
node,way    osak:*                  text    delete

# kms (DK)
node,way    kms:*                   text    delete

# ngbe (ES)
# See also note:es and source:file above
node,way    ngbe:*                  text    delete

# naptan (UK)
node,way    naptan:*                text    delete

# Corine (CLC) (Europe)
node,way    CLC:*                   text    delete

# misc
node,way    3dshapes:ggmodelk       text    delete
node,way    AND_nosr_r              text    delete
node,way    import                  text    delete
node,way    it:fvg:*                text    delete
